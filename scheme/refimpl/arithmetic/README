This is a reference implementation for the Preliminary R6RS Arithmetic
SRFI.  This implementation should be replaced by a more modular and
efficient reference implementation, which Will Clinger plans to produce,
but this one will have to do for now.

See COPYING for license information.

This implementation is written in R5RS Scheme with a few exceptions:

- There may be name clashes between the different modules that
  constitute the code.

- The fixnum code uses the underlying implementations of the bitwise
  operators; portable implementations are available as part of SRFI 60.

- The code uses SRFI 9 (Defining Record Types) and SRFI 23 (Error
  reporting mechanism).

- The code uses the Scheme 48 DEFINE-RECORD-DISCLOSER procedure to
  make the number objects print; these may be deleted without loss of
  functionality.

- Numerous modules assume an underlying IEEE-754-like representation
  for flonums; they are clearly marked in the module definitions as
  having dependencies on the FLONUMS-IEEE structure.

The code assumes a certain minimal fixnum range:

- The lengths of bignums are restricted by the fixnum range.
- We assume the widths of the IEEE representations (exponent and
  mantissa) are representable as fixnums.

The code has one temporary caveat: The procedures `->exact' and
`->inexact' are called `x->exact' and `x->inexact', as `->exact' and
`->inexact' are not valid R5RS identifiers.  They will be renamed in
a future version of this reference implementation, which will use
the records and libraries proposed for R6RS in place of SRFI 9 and
the Scheme 48 module system.

                                * * *

To load the code into an R5RS-conforming system:

1.  Enable SRFI 9 and SRFI 23.
2.  Disable any inlining of R5RS arithmetic procedures.
3.  (load "r5rs.sch")

This will run a series of tests after the code is loaded.

                                * * *

To load the code into Larceny, for example, just fire up larceny
in this directory, and do:

> (load "larceny.sch")
> (load "r5rs.sch")

After the tests have finished, you will have a read/eval/print
loop that uses this reference implementation for all arithmetic.

                                * * *

To use the code in Scheme48, fire up Scheme 48 in this directory, and do:

,config ,load packages.scm

Then do:

,in r6rs

to switch to an environment where the arithmetic is defined.

Note that you can't use the regular R5RS numbers here---you need to
convert them to the number representation of the reference
implementation via the procedure `r5rs->number'.  So, you might do
something like this:

r6rs> (+ (r5rs->number 4) (r5rs->number 7))
#{Fx 11}

To run the tests in Scheme48, do:

,config ,load packages.scm

Then do:

,in test-strings-to-numbers
,in test-fixnum-arithmetic
,in test-generic-arithmetic
,in test-generic-arithmetic/exact
,in test-generic-arithmetic/inexact

The following used to work, but is now broken.  Since it
tests code that implements a semantics that is no longer
under consideration for R6RS, and will eventually be
removed from this reference implementation, the problem
is not worth fixing.

,in test-generic-arithmetic/mike

                                * * *

Enjoy!
